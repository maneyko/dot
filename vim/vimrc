" vimrc
" ===========================================================================

runtime bundle/vim-pathogen/autoload/pathogen.vim

if isdirectory($HOME . "/.vim/bundle/vim-pathogen")
  execute pathogen#infect()
endif

filetype plugin indent on
source $HOME/.vim/ftplugin/man.vim

" UI
" =====================================
"
" visuals
set number                      " line numbers
set ruler                       " line & columns numbers on bottom
set showcmd                     " show command on bottom
set numberwidth=3               " width of line number column
set hlsearch                    " highlight search
set incsearch                   " move while typing search pattern
set smartcase                   " searches for capitals when I type them
set scrolloff=5                 " keep cursor 5 lines frop top/bottom
set showbreak=...               " show ellipsis when going over
set list
set listchars=tab:\ \ ,trail:â‹…
if version >= 702
  au InsertEnter * :set nolist  " dont list trailing chars in insert
  au InsertLeave * :set list
endif

" tab control
set tabstop=4                   " <tab> == 4 spaces
set shiftwidth=4                " number of spaces for indent and unindent
set softtabstop=4               " edit 4 spaces as if they are tabs
set expandtab                   " tab makes spaces
set autoindent                  " automatically indent new lines
set smartindent                 " knows when to indent
set smarttab                    " tab respects tab settings completely

" misc
set ignorecase                  " ignore case for search
set clipboard=unnamed           " system clipboard
set tildeop                     " tilde operator for changing CASE
let g:netrw_dirhistmax = 0      " no .netrwhist files
if has("mouse")
  set mouse=a
endif
map <ScrollWheelUp> <C-y>
map <ScrollWheelDown> <C-e>

" colors
" ======================================
"
syntax on                       " syntax highlighting
set t_Co=256                    " terminal supports 256 colors
colorscheme colorsbox-stnight

" make bg and fg colors same as terminal
highlight Normal ctermbg=NONE
highlight Normal ctermfg=NONE

" remaps
" =====================================
"
let g:mapleader = ","

" spell check
nnoremap <silent> <leader>s :setlocal spell! spelllang=en_us<CR>

" redraw screen and remove highlights
nnoremap <silent> <C-l> :nohl<CR><C-l>

" enable relativenumber
nnoremap <silent> <C-n> :set relativenumber!<CR>

nnoremap <silent> <leader>vc :source $HOME/.vim/vimrc<CR>:nohl<CR><C-l>
      \:echo "reloaded vimrc"<CR>
" change tabbing for whole file
nnoremap \n :set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab<CR>
      \:%retab!<CR>:echo "noexpandtab"<CR>
nnoremap \t :set tabstop=4 softtabstop=4 shiftwidth=4 expandtab<CR>
      \:%retab!<CR>:echo "expandtab"<CR>

" disable arrow keys
nnoremap <Up>       <NOP>
nnoremap <Down>     <NOP>
nnoremap <Left>     <NOP>
nnoremap <Right>    <NOP>

nnoremap Y y$
nnoremap <leader><leader> :w<CR>
nnoremap <leader>q :q<CR>

" paste from system register
inoremap <C-p>  <C-r>*
inoremap jk <Esc>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

" functions
" =====================================
"
" file specific autocommands
if has('autocmd')
  autocmd BufRead *tmux.conf set ft=sh
  autocmd BufRead plugins.txt set ft=sh
  autocmd BufNewFile main.c{,pp} execute
        \"normal oint\<Space>main()\<CR>{\<CR>\<CR>}\<Up>\<Tab>
        \return\<Space>0;\<Esc>0"
  autocmd BufNewFile *.sh execute "normal i#!/bin/sh\<CR>\<Esc>"
  autocmd FileType vim setlocal ts=2 sw=2 sts=2 expandtab keywordprg=:help
  autocmd FileType help setlocal keywordprg=:help |
        \ silent! call ReadMode(1)
  autocmd FileType c{,pp} source $HOME/.vim/ftplugin/c.vim
  autocmd FileType sh source $HOME/.vim/ftplugin/sh.vim
endif

function! PluginInstall()
  !mkdir $HOME/.vim/bundle 2>/dev/null; echo;
  \ for plugin in $(cat $HOME/.vim/plugins.txt | grep -Eo '^[^ \#]*'); do
  \   if [ -d $HOME/.vim/bundle/${plugin\#*/} ]; then
  \     cd $HOME/.vim/bundle/${plugin\#*/} && git fetch --all -v;
  \   else
  \     cd $HOME/.vim/bundle && git clone https://github.com/$plugin;
  \   fi; echo;
  \ done;
  \ for dir in $(ls $HOME/.vim/bundle); do
  \   if [ \! "$(cat $HOME/.vim/plugins.txt |\
                \grep -Eo '^[^ \#]*' | grep $dir)" ]; then
  \     echo removing directory, $dir/;
  \     rm -fr $HOME/.vim/bundle/$dir;
  \   fi;
  \ done;
endfunction
command! PluginInstall silent call PluginInstall() |
      \ silent execute '!sleep 3' | redraw!

function! ReadMode(rmd)
  if a:rmd==1
    echo "Read Mode on"
    set nomodifiable
    set readonly
    nnoremap <buffer> q :q<CR>
    nnoremap <buffer> <leader>q :q!<CR>
    nnoremap <buffer> j <C-e>L0:file<CR>
    nnoremap <buffer> k <C-y>L0:file<CR>
    if @% == ''
      set ft=sh
      nnoremap <buffer> q :q!<CR>
    endif
    let g:rmd=0
  else
    echo "Read Mode off"
    set modifiable
    set noreadonly
    nunmap <buffer> q
    nunmap <buffer> <leader>q
    nunmap <buffer> j
    nunmap <buffer> k
    execute "normal M"
    let g:rmd=1
  endif
endfunction
let g:rmd=1
nnoremap <leader>r :call ReadMode(rmd)<CR>
" " hello world
" " hello world
" hello world
" hello world

function! FlyMode(fmd)
  if a:fmd==1
    echo "Fly Mode on"
    setlocal so=999
    nnoremap <buffer> q :q<CR>
    let g:fmd=0
  else
    echo "Fly Mode off"
    setlocal so=5
    nunmap <buffer> q
    let g:fmd=1
  endif
endfunction
let g:fmd=1
nnoremap <leader>f :call FlyMode(fmd)<CR>

" plugin options
" =====================================
"
let g:SuperTabDefaultCompletionType="context" " contextual completion
let g:SuperTabCrMapping=1

