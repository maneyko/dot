" vimrc
" ==============

set nocompatible
filetype off
if !empty(glob('~/.vim/bundle/Vundle.vim'))
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()

  Plugin 'VundleVim/Vundle.vim'        " plugin manager
  Plugin 'Valloric/YouCompleteMe'      " completion engine
  Plugin 'davidhalter/jedi-vim'        " python completion
  Plugin 'maneyko/vim-do'              " execute shell commands

  " syntax
  " Plugin 'Glench/Vim-Jinja2-Syntax'    " jinja html templates
  " Plugin 'digitaltoad/vim-pug'         " pug html templates
  " Plugin 'leafgarland/typescript-vim'  " typescript
  " Plugin 'vim-scripts/nginx.vim'       " nginx

  " misc
  Plugin 'jiangmiao/auto-pairs'        " completes pairs
  Plugin 'ctrlpvim/ctrlp.vim'          " fuzzy file finder
  " Plugin 'scrooloose/nerdtree'         " filetree
  " Plugin 'scrooloose/syntastic'        " syntax linter

  " filetype specific
  Plugin 'mattn/emmet-vim'             " html completion

  " tpope
  Plugin 'tpope/vim-commentary'        " commenting motions
  Plugin 'tpope/vim-endwise'           " closes functions (if and fi)
  Plugin 'tpope/vim-fugitive'          " git integration
  Plugin 'tpope/vim-repeat'            " '.' for plugins
  Plugin 'tpope/vim-surround'          " surrounding motions
  Plugin 'tpope/vim-unimpaired'        " bracket functions and more

  call vundle#end()
endif
filetype plugin indent on

if !empty(glob('~/.vim/ftplugin/man.vim'))
  source ~/.vim/ftplugin/man.vim
endif

if has('autocmd')
  source ~/.vim/src/autocmd.vim
endif
source ~/.vim/src/fun.vim

" set
" ==============

set autoindent
if has('patch-7.4-346')
  set breakindent
endif
set clipboard=unnamed
set expandtab
set hlsearch
set ignorecase
set incsearch
set list
set listchars=tab:\ \ ,trail:â‹…
if has('mouse')
  set mouse=a
endif
if version >= 702
  au InsertLeave * set list
  au InsertEnter * set nolist
endif
set nowrap
set number
set numberwidth=3
set ruler
set scrolloff=1
set shiftwidth=4
set showcmd
set smartcase
set smartindent
set smarttab
set softtabstop=4
set t_Co=256
set tabstop=4
set tildeop

let g:netrw_dirhistmax=0  " no .netrwhist files
let $BASH_ENV='~/.bash/aliases.bash'

" colors
" ==============

syntax on
colorscheme colorsbox-stnight

" make bg and fg colors same as terminal
highlight Normal ctermbg=NONE
highlight Normal ctermfg=NONE

" remaps
" ==============

let g:mapleader = ','

nnoremap <C-j>            <C-w>j
nnoremap <C-k>            <C-w>k
nnoremap <C-l>            :nohl<CR><C-l>
nnoremap <C-n>            :set relativenumber!<CR>
nnoremap <leader><leader> :w<CR>
nnoremap <leader>f        :call FlyMode(flymode_togg)<CR>
nnoremap <leader>kq       :q!<CR>
nnoremap <leader>n        :NERDTreeToggle<CR>
nnoremap <leader>q        :q<CR>
nnoremap <leader>r        :call ReadMode(readmode_togg)<CR>
nnoremap <leader>s        :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>kw       :w !sudo tee %<CR>
nnoremap \a               080lF<Space>r<CR>
nnoremap \e               :<C-U>call TabFun(v:count1*2,1)<CR>
nnoremap \n               :<C-U>call TabFun(v:count1*2,0)<CR>
nnoremap \r               :call ReadMode(readmode_togg)<CR>
nnoremap \s               1z=
nnoremap \w               :%s/\s\+$//<CR>:nohl<CR><C-l>
nnoremap Q                <Esc>
nnoremap U                <C-r>
nnoremap Y                y$
nnoremap daf              :1,$d<CR>
nnoremap yaf              :1,$y<CR>
nnoremap zfs              :mkview<CR>
nnoremap zfl              :loadview<CR>

inoremap <C-a>            <C-o>^
inoremap <C-d>            <C-o>x
inoremap <C-e>            <C-o>$
inoremap <C-p>            <C-r>*
inoremap <C-w>            <C-o><C-w>
inoremap <M-b>            <C-o>b
inoremap <M-f>            <C-o>w
inoremap jk               <Esc>

vnoremap .                :normal! .<CR>
vnoremap &                :normal! &<CR>

map <ScrollWheelUp>       <C-y>
map <ScrollWheelDown>     <C-e>

" plugins
" ==============

let g:user_emmet_leader_key = '<NUL>'  " equals '<C-space>,'
let g:do_refresh_key = '<C-M>'
let g:SuperTabDefaultCompletionType = 'context'  " contextual completion
let g:SuperTabCrMapping = 1
let g:SuperTabLongestHighlight = 1
let g:vimpager = {}
let g:less = {}
let g:less.enabled = 0
let g:less.scrolloff = 5

let g:ycm_filetype_specific_completion_to_disable = {
  \   'python': 1,
\ }
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_error_symbol = '??'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers = {
  \   'python': ['re![a-zA-Z]+'],
\ }
let g:ycm_server_use_vim_stdout = 0
let g:ycm_server_keep_logfiles = 1
" ~/.vim/bundle/YouCompleteMe/python/ycm/client/completion_request.py 32j

" let g:jedi#show_call_signatures = '0'
" let g:jedi#show_call_signatures_delay = 1000
