" vimrc
" ========================================================================

set nocompatible
filetype off
if !empty(glob("~/.vim/bundle/Vundle.vim"))
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()

  Plugin 'VundleVim/Vundle.vim'        " plugin manager
  Plugin 'Valloric/YouCompleteMe'      " completion engine
  Plugin 'davidhalter/jedi-vim'        " python completion
  Plugin 'joonty/vim-do'               " execute commands in background

  " syntax
  Plugin 'Glench/Vim-Jinja2-Syntax'    " Python Jinja
  Plugin 'digitaltoad/vim-pug'
  " Plugin 'othree/es.next.syntax.vim'   " New JavaScript
  " Plugin 'othree/yajs.vim'             " Yet Another JavaScript Syntax
  " Plugin 'keith/swift.vim'             " Swift
  Plugin 'leafgarland/typescript-vim'    " Typescript
  Plugin 'vim-scripts/nginx.vim'       " Nginx

  " misc
  Plugin 'alvan/vim-closetag'          " closes html tags
  Plugin 'jiangmiao/auto-pairs'        " completes pairs
  " Plugin 'scrooloose/nerdtree'         " filetree in vim
  " Plugin 'scrooloose/syntastic'        " syntax linter
  Plugin 'ctrlpvim/ctrlp.vim'          " fuzzy finder

  " filetype specific
  " Plugin 'moll/vim-node'               " node commands
  Plugin 'mattn/emmet-vim'             " html completion

  " tpope
  Plugin 'tpope/vim-commentary'        " commenting motions
  Plugin 'tpope/vim-endwise'           " closes functions (if and fi)
  " Plugin 'tpope/vim-fugitive'          " git integration
  Plugin 'tpope/vim-repeat'            " '.' for plugins
  Plugin 'tpope/vim-surround'          " surrounding motions
  Plugin 'tpope/vim-unimpaired'        " bracket functions and more

  call vundle#end()
endif
filetype plugin indent on

if !empty(glob("~/.vim/ftplugin/man.vim"))
    source $HOME/.vim/ftplugin/man.vim
endif
source $HOME/.vim/src/fun.vim

" set
" =====================================

set autoindent                  " automatically indent new lines
set breakindent                 " wrap and indent
set clipboard=unnamed           " system clipboard
set expandtab                   " tab makes spaces
set hlsearch                    " highlight search
set ignorecase                  " ignore case for search
set incsearch                   " move while typing search pattern
set list                        " show interesting characters
set listchars=tab:\ \ ,trail:â‹…  " dots on trailing whitespace
if has("mouse")
  set mouse=a
endif
if version >= 702
  au InsertLeave * set list
  au InsertEnter * set nolist  " dont list trailing chars in insert
endif
set nowrap                      " dont wrap text
set number                      " line numbers
set numberwidth=3               " width of line number column
set ruler                       " line & columns numbers on bottom
set smartcase                   " searches for capitals when I type them
set scrolloff=1                 " keep cursor 1 lines frop top/bottom
set shiftwidth=4                " number of spaces for indent and unindent
" set showbreak=...               " show ellipsis when going over
set showcmd                     " show command on bottom
set smartindent                 " knows when to indent
set smarttab                    " tab respects tab settings completely
set softtabstop=4               " edit 4 spaces as if they are tabs
set t_Co=256                    " terminal supports 256 colors
set tabstop=4                   " <tab> == n spaces
set tildeop                     " tilde operator for changing CASE

let g:netrw_dirhistmax = 0      " no .netrwhist files
let $BASH_ENV="~/.bash/aliases.bash"

" colors
" ======================================

syntax on
colorscheme colorsbox-stnight
                                " make bg and fg colors same as terminal
highlight Normal ctermbg=NONE
highlight Normal ctermfg=NONE

" remaps
" =====================================

let g:mapleader = ","

nnoremap<leader>r         :call ReadMode(readmode_togg)<CR>
nnoremap <C-j>            <C-w>j
nnoremap <C-k>            <C-w>k
nnoremap <C-l>            :nohl<CR><C-l>
nnoremap <C-n>            :set relativenumber!<CR>
nnoremap <leader><leader> :w<CR>
nnoremap <leader>f        :call FlyMode(flymode_togg)<CR>
nnoremap <leader>kq       :q!<CR>
nnoremap <leader>n        :NERDTreeToggle<CR>
nnoremap <leader>q        :q<CR>
nnoremap <leader>r        :call ReadMode(readmode_togg)<CR>
nnoremap <leader>s        :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>kw       :w !sudo tee %<CR>
nnoremap \e               :<C-U>call TabFun(v:count1*2,1)<CR>
nnoremap \n               :<C-U>call TabFun(v:count1*2,0)<CR>
nnoremap \r               :call ReadMode(readmode_togg)<CR>
nnoremap \w               :%s/\s\+$//<CR>:nohl<CR><C-l>
nnoremap Q                <Esc>
nnoremap U                <C-r>
nnoremap Y                y$
nnoremap daf              :1,$d<CR>
nnoremap yaf              :1,$y<CR>
nnoremap zfs              :mkview<CR>
nnoremap zfl              :loadview<CR>

inoremap <C-a>            <C-o>^
inoremap <C-d>            <C-o>x
inoremap <C-e>            <C-o>$
inoremap <C-p>            <C-r>*
inoremap <C-w>            <C-o><C-w>
inoremap <M-b>            <C-o>b
inoremap <M-f>            <C-o>w
inoremap jk               <Esc>

vnoremap .                :normal! .<CR>

map <ScrollWheelUp>       <C-y>
map <ScrollWheelDown>     <C-e>

" plugins
" =====================================

let g:user_emmet_leader_key='<NUL>' " <C-space>,
let g:SuperTabDefaultCompletionType="context" " contextual completion
let g:SuperTabCrMapping = 1
let g:SuperTabLongestHighlight = 1
let g:vimpager = {}
let g:less = {}
let g:less.enabled = 0
let g:less.scrolloff = 5
if exists('g:vimpager.enabled')
  " set nolist
endif


let g:ycm_filetype_specific_completion_to_disable = {
\  'python': 1,
\}
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_error_symbol   = '??'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers =  {
  \   'python' : ['re![a-zA-Z]+'],
  \ }
let g:ycm_server_use_vim_stdout = 0
let g:ycm_server_keep_logfiles = 1
" ~/.vim/bundle/YouCompleteMe/python/ycm/client/completion_request.py 32j

" let g:jedi#show_call_signatures="0"
" let g:jedi#show_call_signatures_delay=1000
