#!/usr/bin/env python

"""
    Usage:
        csv2mysql {file.csv} {db} [options] [, {table_name}]

    Loads a .csv file into a MySQL database.

    Options:
        * Extends all mysql options
        -d, --database     Creates database if doesn't exist
        -t, --table        Overwrites table if exists
        -h, --help         Prints this help page
"""

from __future__ import print_function
from os.path import abspath, basename, isfile
from sys import argv
import csv

color = lambda number, text: '\033[38;5;%dm%s\033[0m'%(number, text)

def get_args():
    global myopts, sqlopts, sheet, db, table
    args = [ arg for arg in argv if arg[0] != '-' ]
    opts = set(argv).difference(args)

    myopts = opts.intersection([
        '-d', '--database',
        '-t', '--table',
        '-h', '--help',
    ])
    sqlopts = opts.difference(myopts)

    if len(args) < 3 or myopts.intersection(['-h', '--help']):
        print(__doc__)
        exit(0)

    script, sheet, db = args[:3]
    if not isfile(sheet):
        print('\n', color(1, "Bad csv file. '%s' is not valid"%sheet))
        print(__doc__)
        exit(1)

    if len(args) < 4:
        table = basename(sheet).split('.')[0]
    else:
        table = args[3]

def genfile():
    from tempfile import NamedTemporaryFile
    out = NamedTemporaryFile()

    cols = csv.DictReader(open(sheet)).fieldnames
    out.write("""
    {create_db};
    USE {db};
    {drop_table};
    CREATE TABLE {table} (
      {columns}
    );
    LOAD DATA INFILE '{sheet}'
    INTO TABLE {table}
    FIELDS TERMINATED BY ','
    ENCLOSED BY '"'
    LINES TERMINATED BY '\\n'
    IGNORE 1 ROWS;
    """.format(
        create_db='CREATE DATABASE IF NOT EXISTS %s'%db \
                if myopts.intersection(['-d', '--database']) else '',
        db=db,
        drop_table='DROP TABLE IF EXISTS %s'%table \
                if myopts.intersection(['-t', '--table']) else '',
        table=table,
        columns='\n'.join([ "`%s` TEXT,"%col for col in cols ])[:-1],
        sheet=abspath(sheet)
    ))
    out.seek(0)
    return out

def run(outfile):
    from subprocess import Popen
    status = Popen((['mysql'] + list(sqlopts)), stdin=outfile).wait()
    if status == 0:
        print("""
        {success}

        File         {sheet} loaded into
        Database     {db}
        Table        {table} with
        SQL Options  {opts}
                """.format(
            success=color(2, 'Success!'),
            sheet=color(3, sheet),
            table=color(3, table),
            db=color(3, db),
            opts=', '.join([color(3, o) for o in sqlopts]) or None
        ))
    else:
        err = 'err.sql'
        print("""
        {fail}
        Check output SQL code in '{err}' to see
        if there was an error in the generated file
                """.format(
            fail=color(1, 'Failed!'),
            err=err
        ))
        outfile.seek(0)
        open(err, 'w').write(outfile.read())
        exit(1)

if __name__ == '__main__':
    get_args()
    outfile = genfile()
    run(outfile)

